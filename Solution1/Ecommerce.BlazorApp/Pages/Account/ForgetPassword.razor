@page "/forgetpassword"
@inject IHttpClientFactory _clientFacotry
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Accountingonweb | Forget Password</title>

    <!-- Google Font: Source Sans Pro -->
    <link rel="stylesheet" href="/plugins/fontawesome-free/css/all.min.css">
    <link rel="stylesheet" href="/css/adminlte.min.css">
    <link rel="stylesheet" href="/css/site.css">
</head>
<body class="hold-transition login-page">
    <div class="login-box" style="width:400px">
        <div class="login-logo">
            <a>
                <img width="150" height="30" src="https://nagarnigamajmer.com/media/tqbnxefs/indusmarty2_s1.png" alt="AccountingOnWeb - Logo" />
                <br /><b>Accounting</b> On Web
            </a>
        </div>
        <!-- /.login-logo -->
        <div class="card">
            <div class="card-body">
                <p class="login-box-msg">Sign in to start your session</p>

                @if (_showSpinner == true)
                {
                    <div class="spinner"></div>
                }
                <EditForm Model="_loginViewModel" OnValidSubmit="ExecuteLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (authResponse != null)
                    {
                        <p>@authResponse.ErrorMessage</p>
                    }

                    <div class="input-group mb-3">
                        <input type="email" class="form-control" placeholder="Email">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary btn-block">Request new password</button>
                        </div>
                        <!-- /.col -->
                    </div>
                </EditForm>
                <p class="mt-3 mb-1">
                    <a href="/">Login</a>
                </p>
                <p class="mb-0">
                    <a href="/register" class="text-center">Register a new account</a>
                </p>

            </div>
            <!-- /.login-card-body -->
        </div>
    </div>

</body>

@code {
    private LoginViewModel _loginViewModel = new();
    private string? errorMessage;
    AuthResponse? authResponse = new();
    internal bool _showSpinner = false;
    public async Task ExecuteLogin()
    {
        _showSpinner = true;
        var httpClient = _clientFacotry.CreateClient("AuthAPI");
        StringContent content = new StringContent(JsonConvert.SerializeObject(_loginViewModel), Encoding.UTF8, "application/json");
        var loginUrl = new Uri(httpClient.BaseAddress + "/Account/login");
        using (var response = await httpClient.PostAsync(loginUrl, content))
        {
            string recivedContent = await response.Content.ReadAsStringAsync();
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = response.ReasonPhrase;
                authResponse.Success = false;
                authResponse.ErrorMessage = response.ReasonPhrase;
            }
            if (response.IsSuccessStatusCode)
            {
                // var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                authResponse = JsonConvert.DeserializeObject<AuthResponse>(recivedContent);
                await _localStorage.SetItemAsync("authToken", authResponse.Token);
                ((AuthStateProvider)_authStateProvider).NotifyUserAuthentication(_loginViewModel.Username);
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", authResponse.Token);
            }
            _navigationManager.NavigateTo("/products", true);
            _showSpinner = false;
        }

        StateHasChanged();
    }
}
