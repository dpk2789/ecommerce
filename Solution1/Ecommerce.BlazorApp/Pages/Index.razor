@page "/"
@inject IHttpClientFactory _clientFacotry;
@inject NavigationManager _navigationManager

<PageTitle>Index</PageTitle>
<!-- ========================= SECTION INTRO ========================= -->
<section class="section-intro padding-y-sm">
    <div class="container">

        <div class="intro-banner-wrap">
            <img src="images/banners/1.jpg" class="img-fluid rounded">
        </div>

    </div> <!-- container //  -->
</section>
<!-- ========================= SECTION INTRO END// ========================= -->
<!-- ========================= SECTION FEATURE ========================= -->
<section class="section-content padding-y-sm">
    <div class="container">
        <article class="card card-body">


            <div class="row">
                <div class="col-md-4">
                    <figure class="item-feature">
                        <span class="text-primary"><i class="fa fa-2x fa-truck"></i></span>
                        <figcaption class="pt-3">
                            <h5 class="title">Fast delivery</h5>
                            <p>
                                Dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                                tempor incididunt ut labore
                            </p>
                        </figcaption>
                    </figure> <!-- iconbox // -->
                </div><!-- col // -->
                <div class="col-md-4">
                    <figure class="item-feature">
                        <span class="text-primary"><i class="fa fa-2x fa-landmark"></i></span>
                        <figcaption class="pt-3">
                            <h5 class="title">Creative Strategy</h5>
                            <p>
                                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                            </p>
                        </figcaption>
                    </figure> <!-- iconbox // -->
                </div><!-- col // -->
                <div class="col-md-4">
                    <figure class="item-feature">
                        <span class="text-primary"><i class="fa fa-2x fa-lock"></i></span>
                        <figcaption class="pt-3">
                            <h5 class="title">High secured </h5>
                            <p>
                                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                            </p>
                        </figcaption>
                    </figure> <!-- iconbox // -->
                </div> <!-- col // -->
            </div>
        </article>

    </div> <!-- container .//  -->
</section>

<section class="section-content">
    <div class="container">

        <header class="section-heading">
            <h3 class="section-title">Popular products</h3>
        </header>

        <div class="row">
            @{
                if (products != null)
                {
                    foreach (var item in products)
                    {
                        <div class="col-md-3">
                            <div href="#" class="card card-product-grid">
                                <a href="/productdetail/@item.Id" class="img-wrap">
                                    @{
                                        if (item.ProductImages.Count > 0)
                                        {
                                            <img src="@string.Format("http://admin.robustpackaging.in/Uploads/"+item.ProductImages.FirstOrDefault().Name)" width="300" height="300">
                                        }
                                    }

                                </a>
                                <figcaption class="info-wrap">
                                    <a href="/productdetail/@item.Id" class="title">@item.Title</a>

                                    <div class="rating-wrap">
                                        <ul class="rating-stars">
                                            <li style="width:80%" class="stars-active">
                                                <i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i>
                                            </li>
                                            <li>
                                                <i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i>
                                            </li>
                                        </ul>
                                        <span class="label-rating text-muted"> 34 reviws</span>
                                    </div>
                                    <div class="price mt-1">Rs.@item.SalePrice</div>
                                </figcaption>
                            </div>
                        </div> <!-- col.// -->
                    }
                }
            }

        </div>

    </div>
</section>


@code {
    public List<ProductViewModel>? products;
    public ProductViewModel newProduct = new ProductViewModel();
    private string? errorMessage;
    private bool? success = true;


    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await FetchProductList();
    //        await base.OnAfterRenderAsync(firstRender);
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        await FetchProductList();
    }

    public async Task FetchProductList()
    {
        var httpClient = _clientFacotry.CreateClient("ProductsAPI");
        var defaultReqHeader = httpClient.DefaultRequestHeaders;

        var getProductsUri = new Uri(httpClient.BaseAddress + "/products/GetAllProducts");
        using (var response = await httpClient.GetAsync(getProductsUri))
        {
            string recivedContent = await response.Content.ReadAsStringAsync();
            if (!response.IsSuccessStatusCode)
            {
                success = false;
                errorMessage = response.ReasonPhrase;
            }
            if (response.IsSuccessStatusCode)
            {
                // var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                products = JsonConvert.DeserializeObject<List<ProductViewModel>>(recivedContent);
            }
        }
        StateHasChanged();
    }
}