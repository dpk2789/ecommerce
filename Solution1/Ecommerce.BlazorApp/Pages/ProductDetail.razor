@page "/productdetail/{id}/"
@page "/productdetail"
@inject IHttpClientFactory _clientFacotry
@inject IAuthService authService
@inject NavigationManager _navigationManager

<section class="section-content padding-y bg">
    <div class="container">

        <div class="card">
            <div class="row no-gutters">
                <aside class="col-md-6">
                    <article class="gallery-wrap">
                        <div class="img-big-wrap">
                            @{
                                if (productDetail.ProductImages != null)
                                {
                                    <a><img src="@MainImagePath"></a>
                                }
                            }
                        </div>
                        <div class="thumbs-wrap">
                            @{
                                if (productDetail.ProductImages != null)
                                {
                                    @foreach (var item in productDetail.ProductImages)
                                    {
                                        <a onclick="@(async()=>{await ChangeMainImage(item);})" class="item-thumb"> <img src="@string.Format(MainImageUrl+item.Name)"></a>
                                    }
                                }
                            }
                        </div>
                    </article>
                </aside>
                <main class="col-md-6 border-left">
                    <article class="content-body">

                        <h2 class="title">@productDetail.Title</h2>

                        <div class="rating-wrap my-3">
                            <ul class="rating-stars">
                                <li style="width:80%" class="stars-active">
                                    <img src="../images/icons/stars-active.svg" alt="">
                                </li>
                                <li>
                                    <img src="../images/icons/starts-disable.svg" alt="">
                                </li>
                            </ul>
                            <small class="label-rating text-muted">132 reviews</small>
                            <small class="label-rating text-success"> <i class="fa fa-clipboard-check"></i> 154 orders </small>
                        </div>

                        <div class="mb-3">
                            <var class="price h4">@String.Format(new CultureInfo("hi-IN"),"{0:C}", productDetail.SalePrice)</var>
                        </div>

                        <p>@productDetail.Description</p>

                        <dl class="row">
                            <dt class="col-sm-3">Model#</dt>
                            <dd class="col-sm-9">@productDetail.ModelNumber</dd>

                            <dt class="col-sm-3">Color</dt>
                            <dd class="col-sm-9">Brown</dd>

                            <dt class="col-sm-3">Delivery</dt>
                            <dd class="col-sm-9">INDIA </dd>
                        </dl>

                        <hr>
                        <div class="row">
                            <div class="form-group col-md flex-grow-0">
                                <label>Quantity</label>
                                <div class="input-group mb-3 input-spinner">
                                    <select name="quantity" autocomplete="off" class="form-select" @bind=addToCartRequest.Qty>
                                        <option value="1" selected="">1 </option>
                                        <option value="2">2 </option>
                                        <option value="3">3 </option>
                                        <option value="4">4 </option>
                                        <option value="5">5 </option>
                                    </select>
                                </div>
                            </div> <!-- col.// -->

                        </div> <!-- row.// -->
                        <a href="/checkout" class="btn  btn-primary"> Buy now </a>
                        @{
                            if (productDetail.IsInCart == true)
                            {
                                <a class="btn  btn-outline-primary" href="/cart">
                                    <span class="text">Go to cart</span>
                                    <i class="fas fa-shopping-cart"></i>
                                </a>
                            }
                            else
                            {
                                <a class="btn  btn-outline-primary">
                                    <span class="text" onclick="@(async()=>{await AddToCart();})">Add to cart</span>
                                    <i class="fas fa-shopping-cart"></i>
                                </a>
                            }
                        }

                    </article> <!-- product-info-aside .// -->
                </main> <!-- col.// -->
            </div> <!-- row.// -->
        </div> <!-- card.// -->

        <br><br>

    </div> <!-- container .//  -->
</section>

@code {
    [Parameter]
    public string Id { get; set; }
    internal bool _showSpinner = false;
    private string? errorMessage;
    private string? MainImagePath;
    private string? MainImageUrl = "https://admin.robustpackaging.in/Uploads/";
    private bool? success = true;
    public ProductDetailViewModel productDetail = new ProductDetailViewModel();
    public AddToCartRequest addToCartRequest = new AddToCartRequest();
    protected override async Task OnInitializedAsync()
    {
        _showSpinner = true;
        var httpClient = _clientFacotry.CreateClient("ProductsAPI");
        addToCartRequest.Qty = 1;
        var getProductsUri = new Uri(httpClient.BaseAddress + "/products/GetProductById" + $"?Id={Id}");
        using (var response = await httpClient.GetAsync(getProductsUri))
        {
            string recivedContent = await response.Content.ReadAsStringAsync();
            if (!response.IsSuccessStatusCode)
            {
                success = false;
                errorMessage = response.ReasonPhrase;
            }
            if (response.IsSuccessStatusCode)
            {
                // var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                productDetail = JsonConvert.DeserializeObject<ProductDetailViewModel>(recivedContent);
            }
        }
        MainImagePath = string.Format(MainImageUrl + productDetail.ProductImages.FirstOrDefault().Name);
        StateHasChanged();
    }

    private async Task AddToCart()
    {
        _showSpinner = true;
        var httpClient = _clientFacotry.CreateClient("ProductsAPI");
        var username = await authService.GetUserName();
        addToCartRequest.UserId = username;
        addToCartRequest.ProductId = Id;
        addToCartRequest.Price = productDetail.SalePrice;
        if (username == "")
        {
            _navigationManager.NavigateTo("/login", true);
            StateHasChanged();
        }
        StringContent content = new StringContent(JsonConvert.SerializeObject(addToCartRequest), Encoding.UTF8, "application/json");
        var loginUrl = new Uri(httpClient.BaseAddress + "/Cart/AddToCart");
        using (var response = await httpClient.PostAsync(loginUrl, content))
        {
            string recivedContent = await response.Content.ReadAsStringAsync();
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = response.ReasonPhrase;
            }
            if (response.IsSuccessStatusCode)
            {

                _navigationManager.NavigateTo("/productdetail/" + Id, true);
            }

            _showSpinner = false;
        }

        StateHasChanged();
    }

    private async Task ChangeMainImage(ProductImageViewModel imageViewModel)
    {
        _showSpinner = true;
        MainImagePath = string.Format(MainImageUrl + imageViewModel.Name);
        StateHasChanged();
    }
}
